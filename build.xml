<!-- Build BEAST 2. It is also used by Hudson BEAST_2 project. JUnit test is available for this build. -->
<project basedir="." default="build_jar_all_BEAST" name="BUILD_BEAST_2">
    <description>
        Build BEAST 2.
        Also used by Hudson BEAST_2 project.
        JUnit test is available for this build.
        $Id: build_BEAST_2.xml $
    </description>

    <!-- set global properties for this build -->
    <property name="src" location="src" />
    <property name="build" location="build" />
    <property name="lib" location="lib" />
    <property name="doc" location="doc" />
    <property name="dist" location="build/dist" />
    <property name="test" location="test" />

    <property name="main_class_BEAST" value="beast.app.beastapp.BeastMain" />
    <property name="report" value="build/junitreport" />

    <path id="classpath">
        <fileset dir="${lib}" includes="beagle.jar"/>
        <fileset dir="${lib}" includes="jam.jar"/>
        <fileset dir="${lib}" includes="colt.jar"/>
        <fileset dir="${lib}" includes="fest.jar"/>
        <fileset dir="${lib}" includes="junit-4.8.2.jar"/>
        <fileset dir="${lib}" includes="antlr-runtime-4.5.jar"/>
    </path>

    <!--
        <path id="testclasspath">
            <fileset dir="${lib}" includes="**/*.jar" />
        </path>
    -->

    <!-- start -->
    <target name="init">
        <echo message="${ant.project.name}: ${ant.file}" />
    </target>

    <target name="clean">
        <delete dir="${build}" />
        <delete dir="${test}" />
    </target>

    <!-- clean previous build, and then compile Java source code, and Juint test -->
    <target name="build_all_BEAST" depends="clean,compile-all,junit" description="Clean and Build all run-time stuff">
    </target>

    <!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar and beauti.jar -->
    <target name="build_jar_all_BEAST"
            depends="clean,compile-all,junit,dist_all_BEAST"
            description="Clean and Build all run-time stuff">
    </target>


    <!-- No JUnit Test, clean previous build, compile Java source code, and make the beast.jar and beauti.jar -->
    <target name="build_jar_all_BEAST_NoJUnitTest"
            depends="clean,compile-all,dist_all_BEAST"
            description="Clean and Build all run-time stuff">
    </target>

    <!-- compile Java source code -->
    <target name="compile-all" depends="init">
        <echo>Building BEAST 2</echo>
        <mkdir dir="${build}" />

        <!-- Compile the java code from ${src} into ${build} /bin -->
        <javac source="1.8"
               target="1.8"
               srcdir="${src}"
               destdir="${build}"
               classpathref="classpath"
               fork="true"
               memoryinitialsize="256m"
               memorymaximumsize="1024m"
               includeAntRuntime='false'>
            <include name="beast/**/**" />
            <!-- apache commons math -->
            <include name="org/**/**" />
            <!-- compile JUnit test classes -->
            <include name="test/beast/**" />
        </javac>

        <!-- compile the launcher apps against Java 6-->
        <delete file="${build}/beast/app/beastapp/BeastLauncher.class" />
        <delete file="${build}/beast/app/beauti/BeautiLauncher.class" />
        <delete file="${build}/beast/app/tools/AppStoreLauncher.class" />
        <delete file="${build}/beast/app/tools/LogCombinerLauncher.class" />
        <delete file="${build}/beast/app/treeannotator/TreeAnnotatorLauncher.class" />
        <delete file="${build}/beast/app/util/Utils6.class" />
        <delete file="${build}/beast/app/BEASTVersion.class" />
        <delete file="${build}/beast/app/util/Version.class" />
        <javac source="1.6"
               target="1.6"
               bootclasspath='/opt/jdk1.6.0_45/jre/lib/rt.jar'
               srcdir="${src}"
               destdir="${build}"
               classpathref="classpath"
               fork="true"
               memoryinitialsize="256m"
               memorymaximumsize="1024m"
               includeAntRuntime='false'>
            <include name="beast/**/*Launcher.java" />
            <include name="beast/**/Utils6.java" />
            <include name="beast/**/BEASTVersion.java" />
            <include name="beast/**/Version.java" />
        </javac>
        <copy todir="${build}">
            <fileset dir="${src}" includes="**/*.properties" />
            <fileset dir="${src}" includes="**/*.png" />
        </copy>
        <echo message="Successfully compiled." />
    </target>

    <!-- make the beast.jar -->
    <target name="dist_all_BEAST" depends="compile-all" description="create BEAST jar">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}" />

        <!-- Put everything in ${build} into the beast.jar file -->
        <jar jarfile="${dist}/beast.jar">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Main-Class" value="${main_class_BEAST}" />
            </manifest>
            <fileset dir="${build}">
                <include name="beast/**/*.class" />
                <include name="beast/**/*.properties" />
                <include name="beast/**/*.png" />
                <include name="beagle/**/*.class" />
                <include name="org/**/*.class" />
            </fileset>
            <zipgroupfileset dir="${lib}" includes="jam.jar" />
            <zipgroupfileset dir="${lib}" includes="beagle.jar" />
            <zipgroupfileset dir="${lib}" includes="colt.jar" />
            <zipgroupfileset dir="${lib}" includes="commons-math3-3.1.1.jar" />
            <zipgroupfileset dir="${lib}" includes="antlr-runtime-4.5.jar"/>
        </jar>
        <jar jarfile="${dist}/launcher.jar">
            <fileset dir="${build}">
                <include name="beast/**/*Launcher.class" />
                <include name="beast/**/Utils6*.class" />
                <include name="beast/**/BEASTVersion.class" />
                <include name="beast/**/Version.class" />
                <include name="beast/app/draw/icons/beauti.png"/>
            </fileset>
        </jar>
        <jar jarfile="${dist}/beast.src.jar">
            <fileset dir="${src}">
                <include name="beast/**/*.java" />
                <include name="org/**/*.java" />
                <include name="test/**/*.java" />
                <include name="beast/**/*.png" />
                <include name="beast/**/*.xsl" />
            </fileset>
        </jar>


</target>

    <!-- run beast.jar -->
    <target name="run_BEAST">
        <java jar="${dist}/beast.jar" fork="true" />
    </target>

    <!-- JUnit test -->
    <target name="junit">
        <mkdir dir="${report}" />
        <junit printsummary="yes" failureproperty="junitfailed">
            <!--showoutput='yes'-->
            <classpath>
                <path refid="classpath" />
                <path location="${build}" />
            </classpath>

            <formatter type="xml" />

            <batchtest fork="yes" todir="${report}">
                <fileset dir="${src}">
                    <include name="test/**/*Test.java" />
                    <exclude name="test/beast/beast2vs1/**/*Test.java"/>
                    <exclude name="test/beast/app/beauti/**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <echo message="JUnit test finished." />
    </target>

    <target name="junitreport">
        <junitreport todir="${report}">
            <fileset dir="${report}" includes="*.xml" />
            <report format="frames" todir="${report}" />
        </junitreport>
        <echo message="JUnit test report finished." />
    </target>

    <!-- Target for Travis-CI with non-zero exit status on test failure. -->
    <target name="travis" depends="clean, compile-all, junit">
        <fail if="junitfailed" message="One or more unit tests failed."/>
    </target>

    <!-- testing beauti gui-->
    <target name="junitb">
        <mkdir dir="${report}" />
        <junit printsummary="yes">
            <!--showoutput='yes'-->
            <classpath>
                <path refid="classpath" />
                <path location="${build}" />
            </classpath>

            <formatter type="xml" />

            <batchtest fork="yes" todir="${report}">
                <fileset dir="${src}">
                    <include name="test/beast/app/beauti/**/*Test2.java"/>
                </fileset>
            </batchtest>
        </junit>
        <echo message="JUnit test finished." />
    </target>



</project>

